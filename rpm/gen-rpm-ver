#!/usr/bin/env bash

REPO_DIR="$1"
VERSION="$2"

if [ -z "$REPO_DIR" ] || [ -z "$VERSION" ]; then
	# shellcheck disable=SC2016
	echo 'usage: ./gen-rpm-ver ${REPO_DIR} ${VERSION}'
	exit 1
fi

GIT_COMMAND="git -C $REPO_DIR"
origVersion="$VERSION"
rpmVersion="${VERSION#v}"

# rpm "Release:" field ($rpmRelease) is used to set the "_release" macro, which
# is an incremental number for builds of the same release (Version: / #rpmVersion).
#
# This field can be:
#
# - Version: 0   : Package was built, but no matching upstream release (e.g., can be used for "nightly" builds)
# - Version: 1   : Package was built for an upstream (pre)release version
# - Version: > 1 : Only to be used for packaging-only changes (new package built for a version for which a package was already built/released)
#
# For details, see the Fedora packaging guide:
# https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/#_complex_versioning_with_a_reasonable_upstream
#
# Note that older versions of the rpm spec allowed more traditional information
# in this field, which is still allowed, but considered deprecated; see
# https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/#_complex_versioning_with_a_reasonable_upstream
#
# In our case, this means that all releases, except for "nightly" builds should
# use "Version: 1". Only in an exceptional case, where we need to publish a new
# package (build) for an existing release, "Version: 2" should be used; this script
# does not currently account for that situation.
#
# Assuming all tagged version of rpmRelease correspond with an upstream release,
# this means that versioning is as follows:
#
# Docker 22.06.0:         version=22.06.0, release=1
# Docker 22.06.0-alpha.1: version=22.06.0, release=1
# Docker 22.06.0-beta.1:  version=22.06.0, release=1
# Docker 22.06.0-rc.1:    version=22.06.0, release=1
# Docker 22.06.0-dev:     version=0.0.0~YYYYMMDDHHMMSS.gitHASH, release=0
rpmRelease=1

# rpm packages require a tilde (~) instead of a hyphen (-) as separator between
# the version # and pre-release suffixes, otherwise pre-releases are sorted AFTER
# non-pre-release versions, which would prevent users from updating from a pre-
# release version to the "ga" version.
#
# For details, see the Fedora packaging guide:
# https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/#_handling_non_sorting_versions_with_tilde_dot_and_caret
#
# > The tilde symbol (‘~’) is used before a version component which must sort
# > earlier than any non-tilde component. It is used for any pre-release versions
# > which wouldn’t otherwise sort appropriately.
# >
# > For example, with upstream releases 0.4.0, 0.4.1, 0.5.0-rc1, 0.5.0-rc2, 0.5.0,
# > the two "release candidates" should use 0.5.0~rc1 and 0.5.0~rc2 in the Version:
# > field. Bugfix or "patchlevel" releases that some upstream make should be handled
# > using simple versioning. The separator used by upstream may need to be replaced
# > by a dot or dropped.
# >
# > For example, if the same upstream released 0.5.0-post1 as a bugfix version,
# > this "post-release" should use 0.5.0.post1 in the Version: field. Note that
# > 0.5.0.post1 sorts lower than both 0.5.1 and 0.5.0.1.
#
# The code below replaces hyphens with tildes. Note that an intermediate $tilde
# variable is needed to make this work on all versions of Bash. In some versions
# of Bash, the tilde would be substituted with $HOME (even when escaped (\~) or
# quoted ('~').
tilde='~'
rpmVersion="${rpmVersion//-/$tilde}"

GITCOMMIT=$($GIT_COMMAND rev-parse --short HEAD)
if [ -n "$($GIT_COMMAND status --porcelain --untracked-files=no)" ]; then
	GITCOMMIT="$GITCOMMIT-unsupported"
fi

# if we have a "-dev" suffix or have change in Git, this is a nightly build, and
# we'll create a pseudo version based on commit-date and -sha.
if [[ "$VERSION" == *-dev ]] || [ -n "$($GIT_COMMAND status --porcelain)" ]; then
	export TZ=UTC

	# based on golang's pseudo-version: https://groups.google.com/forum/#!topic/golang-dev/a5PqQuBljF4
	#
	# using a "pseudo-version" of the form v0.0.0-yyyymmddhhmmss-abcdefabcdef,
	# where the time is the commit time in UTC and the final suffix is the prefix
	# of the commit hash. The time portion ensures that two pseudo-versions can
	# be compared to determine which happened later, the commit hash identifes
	# the underlying commit, and the v0.0.0- prefix identifies the pseudo-version
	# as a pre-release before version v0.0.0, so that the go command prefers any
	# tagged release over any pseudo-version.
	gitUnix="$($GIT_COMMAND log -1 --pretty='%ct')"

	if [ "$(uname)" = "Darwin" ]; then
		# Using BSD date (macOS), which doesn't support the --date option
		# date -jf "<input format>" "<input value>" +"<output format>" (https://unix.stackexchange.com/a/86510)
		gitDate="$(TZ=UTC date -u -jf "%s" "$gitUnix" +'%Y%m%d%H%M%S')"
	else
		# Using GNU date (Linux)
		gitDate="$(TZ=UTC date -u --date "@$gitUnix" +'%Y%m%d%H%M%S')"
	fi

	gitCommit="$($GIT_COMMAND log -1 --pretty='%h')"
	# generated version is now something like '0.0.0-20180719213702-cd5e2db'
	origVersion="0.0.0-${gitDate}-${gitCommit}" # (using hyphens)
	rpmVersion="0.0.0~${gitDate}.${gitCommit}"  # (using tilde and periods)
	rpmRelease=0
fi

# Replace any remaining dashes with periods
rpmVersion="${rpmVersion//-/.}"
echo "$rpmVersion $rpmRelease $GITCOMMIT $origVersion"
