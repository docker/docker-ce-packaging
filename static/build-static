#!/usr/bin/env bash
set -e

: "${CURDIR=}"
: "${STATICOS=}"
: "${STATICARCH=}"
: "${TARGETPLATFORM=}"
: "${TARGETOS=}"
: "${TARGETARCH=}"
: "${TARGETVARIANT=}"

if [ -z "$CURDIR" ]; then
	# shellcheck disable=SC2016
	echo 'CURDIR is required. See README.md for usage.'
	exit 1
fi
if [[ -z "$STATICOS" ]] || [[ -z "$STATICARCH" ]]; then
	# shellcheck disable=SC2016
	echo 'STATICOS and STATICARCH are required. See README.md for usage.'
	exit 1
fi

# TODO: remove this once we support TARGETPLATFORM in download.docker.com folder structure
TARGETOS="$STATICOS"
# STATICARCH reverse lookup for compat with TARGETPLATFORM
case "$STATICARCH" in
	"x86_64")
		TARGETARCH="amd64"
		;;
	"i386")
		TARGETARCH="386"
		;;
	"aarch64")
		TARGETARCH="arm64"
		;;
	"armhf")
		TARGETARCH="arm"
		TARGETVARIANT="v7"
		;;
	"armel")
		TARGETARCH="arm"
		TARGETVARIANT="v6"
		;;
#	"armel")
#		TARGETARCH="arm"
#		TARGETVARIANT="v5"
#		;;
	"riscv64")
		TARGETARCH="riscv64"
		;;
	"ppc64le")
		TARGETARCH="ppc64le"
		;;
	"s390x")
		TARGETARCH="s390x"
		;;
	"mips")
		TARGETARCH="mips"
		;;
	"mipsle")
		TARGETARCH="mipsle"
		;;
	"mips64")
		TARGETARCH="mips64"
		;;
	"mips64le")
		TARGETARCH="mips64le"
		;;
	*)
		TARGETARCH="$STATICARCH"
		;;
esac
TARGETPLATFORM="${TARGETOS}/${TARGETARCH}${TARGETVARIANT:+/${TARGETVARIANT}}"

build_cli() {
	(
		cd "${CLI_DIR}"
		set -x
		docker buildx build \
			--build-arg BUILDKIT_MULTI_PLATFORM=true \
			--build-arg GO_VERSION \
			--build-arg GO_LINKMODE=static \
			--build-arg DEFAULT_PRODUCT_LICENSE \
			--build-arg PACKAGER_NAME \
			--build-arg PLATFORM \
			--build-arg PRODUCT \
			--build-arg VERSION="${GEN_STATIC_VER}" \
			--output ./build \
			--platform "${TARGETPLATFORM}" \
			--target binary .
	)
}

build_engine() {
	(
		cd "${ENGINE_DIR}"
		set -x
		docker buildx build \
			--build-arg BUILDKIT_MULTI_PLATFORM=true \
			--build-arg GO_VERSION \
			--build-arg DOCKER_STATIC=1 \
			--build-arg CONTAINERD_VERSION \
			--build-arg RUNC_VERSION \
			--build-arg DEFAULT_PRODUCT_LICENSE \
			--build-arg PACKAGER_NAME \
			--build-arg PLATFORM \
			--build-arg PRODUCT \
			--build-arg VERSION="${GEN_STATIC_VER}" \
			--output ./build \
			--platform "${TARGETPLATFORM}" \
			--target all .
	)
}

build_buildx() {
	(
		cd "${BUILDX_DIR}"
		set -x
		docker buildx build \
			--platform "${TARGETPLATFORM}" \
			--build-arg BUILDKIT_MULTI_PLATFORM=true \
			--build-arg GO_VERSION \
			--output ./bin \
			--target binaries .
	)
}

build_compose() {
	(
		cd "${COMPOSE_DIR}"
		set -x
		docker buildx build \
			--platform "${TARGETPLATFORM}" \
			--build-arg BUILDKIT_MULTI_PLATFORM=true \
			--build-arg GO_VERSION \
			--output ./bin \
			--target binary .
	)
}

echo "TARGETPLATFORM=${TARGETPLATFORM}"
echo "CONTAINERD_VERSION=${CONTAINERD_VERSION}"
echo "RUNC_VERSION=${RUNC_VERSION}"

targetPair="${TARGETOS}_${TARGETARCH}"
if [ -n "${TARGETVARIANT}" ]; then
	targetPair="${targetPair}_${TARGETVARIANT}"
fi

buildDir="${CURDIR}/build/${TARGETPLATFORM}"

dockerCLIBuildDir="${buildDir}/docker-cli"
dockerEngineBuildDir="${buildDir}/docker-engine"
dockerBuildDir="${buildDir}/docker"
containerdBuildDir="${buildDir}/containerd"
rootlessExtrasBuildDir="${buildDir}/docker-rootless-extras"
buildxBuildDir="${buildDir}/docker-buildx"
composeBuildDir="${buildDir}/docker-compose"

# clean up previous build output dirs
[ -d "${CLI_DIR:?}/build" ] && rm -r "${CLI_DIR:?}/build"
[ -d "${ENGINE_DIR:?}/build" ] && rm -r "${ENGINE_DIR:?}/build"
[ -d "${BUILDX_DIR:?}/bin" ] && rm -r "${BUILDX_DIR:?}/bin"
[ -d "${COMPOSE_DIR:?}/bin" ] && rm -r "${COMPOSE_DIR:?}/bin"

case ${TARGETOS} in
	linux)
		build_cli
		build_engine
		build_buildx
		build_compose
		;;
	darwin)
		build_cli
		build_buildx
		build_compose
		;;
	windows)
		build_cli
		build_engine
		build_buildx
		build_compose
		;;
esac

# cleanup
[ -d "${buildDir}" ] && rm -r "${buildDir}"

# docker CLI
mkdir -p "${dockerCLIBuildDir}"
if [ -d "${CLI_DIR}/build" ]; then
	case ${TARGETOS} in
		linux | darwin)
			cp "${CLI_DIR}"/build/"${targetPair}"/docker-"${TARGETOS}"-* "${dockerCLIBuildDir}/docker"
			;;
		windows)
			cp "${CLI_DIR}"/build/"${targetPair}"/docker-"${TARGETOS}"-*.exe "${dockerCLIBuildDir}/docker.exe"
			;;
	esac
	# package docker CLI
	case ${TARGETOS} in
		linux | darwin)
			(
				set -x
				tar -C "${buildDir}" -c -z -f "${buildDir}/docker-cli-${GEN_STATIC_VER}.tgz" docker-cli
			)
			;;
		windows)
			(
				cd "${buildDir}"
				set -x
				zip -r "docker-cli-${GEN_STATIC_VER}.zip" docker-cli
			)
			;;
	esac
fi

# docker, containerd, and runc
mkdir -p "${dockerEngineBuildDir}"
if [ -d "${ENGINE_DIR}/build" ]; then
	case ${TARGETOS} in
		linux)
			for f in dockerd docker-init docker-proxy; do
				if [ -f "${ENGINE_DIR}/build/${targetPair}/$f" ]; then
					cp -L "${ENGINE_DIR}/build/${targetPair}/$f" "${dockerEngineBuildDir}/$f"
				fi
			done
			# TODO containerd binaries should be built as part of containerd-packaging, not as part of docker/docker-ce-packaging
			mkdir -p "${containerdBuildDir}"
			for f in containerd ctr containerd-shim containerd-shim-runc-v2 runc; do
				if [ -f "${ENGINE_DIR}/build/${targetPair}/$f" ]; then
					cp -L "${ENGINE_DIR}/build/${targetPair}/$f" "${containerdBuildDir}/$f"
				fi
			done
			;;
		windows)
			for f in dockerd.exe docker-proxy.exe; do
				if [ -f "${ENGINE_DIR}/build/${targetPair}/$f" ]; then
					cp -L "${ENGINE_DIR}/build/${targetPair}/$f" "${dockerEngineBuildDir}/$f"
				fi
			done
			;;
	esac
	# package docker, containerd, and runc
	case ${TARGETOS} in
		linux)
			(
				set -x
				tar -C "${buildDir}" -c -z -f "${buildDir}/docker-engine-${GEN_STATIC_VER}.tgz" docker-engine
				tar -C "${buildDir}" -c -z -f "${buildDir}/containerd-${CONTAINERD_VERSION#v}.tgz" containerd
			)
			;;
		windows)
			(
				cd "${buildDir}"
				set -x
				zip -r "docker-engine-${GEN_STATIC_VER}.zip" docker-engine
			)
			;;
	esac
fi

# docker CLI + docker engine
# TODO: for backward compat keep a copy of the old docker.tgz for now
mkdir -p "${dockerBuildDir}"
if [ "$(ls -A "${dockerCLIBuildDir}")" ]; then
	cp "${dockerCLIBuildDir}"/* "${dockerBuildDir}/"
fi
if [ "$(ls -A "${dockerEngineBuildDir}")" ]; then
	cp "${dockerEngineBuildDir}"/* "${dockerBuildDir}/"
fi
# package docker
if [ "$(ls -A "${dockerBuildDir}")" ]; then
	case ${TARGETOS} in
		linux | darwin)
			(
				set -x
				tar -C "${buildDir}" -c -z -f "${buildDir}/docker-${GEN_STATIC_VER}.tgz" docker
			)
			;;
		windows)
			(
				cd "${buildDir}"
				set -x
				zip -r "docker-${GEN_STATIC_VER}.zip" docker
			)
			;;
	esac
fi

# rootless extras
case ${TARGETOS} in
	linux)
		for f in rootlesskit rootlesskit-docker-proxy dockerd-rootless.sh dockerd-rootless-setuptool.sh vpnkit; do
			if [ -f "${ENGINE_DIR}/bundles/${TARGETPLATFORM}/$f" ]; then
				mkdir -p "${rootlessExtrasBuildDir}"
				cp -L "${ENGINE_DIR}/bundles/${TARGETPLATFORM}/$f" "${rootlessExtrasBuildDir}/$f"
			fi
		done
		;;
esac
# package rootless extras
if [ -d "${rootlessExtrasBuildDir}" ]; then
	case ${TARGETOS} in
		linux)
			(
				set -x
				tar -C "${buildDir}" -c -z -f "${buildDir}/docker-rootless-extras-${GEN_STATIC_VER}.tgz" docker-rootless-extras
			)
			;;
	esac
fi

# buildx
if [ -d "${BUILDX_DIR}/bin" ]; then
	mkdir -p "${buildxBuildDir}"
	case ${TARGETOS} in
		linux | darwin)
			cp "${BUILDX_DIR}/bin/${targetPair}/buildx" "${buildxBuildDir}/docker-buildx"
			;;
		windows)
			cp "${BUILDX_DIR}/bin/${targetPair}/buildx.exe" "${buildxBuildDir}/docker-buildx.exe"
			;;
	esac
	# package buildx
	case ${TARGETOS} in
		linux | darwin)
			(
				set -x
				tar -C "${buildDir}" -c -z -f "${buildDir}/docker-buildx-plugin-${DOCKER_BUILDX_REF#v}.tgz" docker-buildx
			)
			;;
		windows)
			(
				cd "${buildDir}"
				set -x
				zip -r "docker-buildx-plugin-${DOCKER_BUILDX_REF#v}.zip" docker-buildx
			)
			;;
	esac
fi

# compose
if [ -d "${COMPOSE_DIR}/bin" ]; then
	mkdir -p "${composeBuildDir}"
	case ${TARGETOS} in
		linux | darwin)
			cp "${COMPOSE_DIR}/bin/${targetPair}/docker-compose" "${composeBuildDir}/docker-compose"
			;;
		windows)
			cp "${COMPOSE_DIR}/bin/${targetPair}/docker-compose.exe" "${composeBuildDir}/docker-compose.exe"
			;;
	esac
	# package compose
	case ${TARGETOS} in
		linux | darwin)
			(
				set -x
				tar -C "${buildDir}" -c -z -f "${buildDir}/docker-compose-plugin-${DOCKER_COMPOSE_REF#v}.tgz" docker-compose
			)
			;;
		windows)
			(
				cd "${buildDir}"
				set -x
				zip -r "docker-compose-plugin-${DOCKER_COMPOSE_REF#v}.zip" docker-compose
			)
			;;
	esac
fi

# create bundle
(
	# bundle is expected to have a tar.gz extension, unlike the other archives, which use .tgz
	bundlesFilename="bundles-ce-static-${STATICOS}-${STATICARCH}.tar.gz"
	set -x
	cd "${buildDir}"
	rm -r */
	tar -zvcf "${CURDIR}/build/${bundlesFilename}" .
)
