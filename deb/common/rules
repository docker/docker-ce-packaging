#!/usr/bin/make -f

# Include default Makefile variables.
include /usr/share/dpkg/default.mk

# Build all armhf binaries as ARMv6 with hard float, to support both
# Debian armhf and Raspbian armhf.
ifeq ($(DEB_TARGET_ARCH),armhf)
	export CFLAGS += -marm -march=armv6+fp
	export GOARM := 6
endif

VERSION ?= $(shell cat engine/VERSION)
# TODO(thaJeztah): allow passing this version when building.
PKG_REVISION ?= 1
export PKG_REVISION

# force packages to be built with xz compression, as Ubuntu 21.10 and up use
# zstd compression, which is non-standard, and breaks 'dpkg-sig --verify'
override_dh_builddeb:
	dh_builddeb -- -Zxz

override_dh_auto_build:
	# Build the daemon and dependencies
	cd engine && DOCKER_GITCOMMIT=$(ENGINE_GITCOMMIT) PRODUCT=docker ./hack/make.sh dynbinary
	cd engine && TMP_GOPATH="/go" hack/dockerfile/install/install.sh tini
	cd engine && TMP_GOPATH="/go" hack/dockerfile/install/install.sh rootlesskit dynamic

	# Build the CLI
	make -C /go/src/github.com/docker/cli DISABLE_WARN_OUTSIDE_CONTAINER=1 VERSION=$(VERSION) GITCOMMIT=$(CLI_GITCOMMIT) LDFLAGS='' dynbinary manpages shell-completion

	# Build buildx plugin
	cd /go/src/github.com/docker/buildx \
	&& mkdir -p /usr/libexec/docker/cli-plugins/ \
	&& GO111MODULE=on \
		CGO_ENABLED=0 \
			go build \
				-mod=vendor \
				-trimpath \
				-ldflags "-X github.com/docker/buildx/version.Version=$(BUILDX_VERSION) -X github.com/docker/buildx/version.Revision=$(BUILDX_GITCOMMIT) -X github.com/docker/buildx/version.Package=github.com/docker/buildx" \
				-o "/usr/libexec/docker/cli-plugins/docker-buildx" \
				./cmd/buildx

	# Build the compose plugin
	make -C /go/src/github.com/docker/compose VERSION=$(COMPOSE_VERSION) DESTDIR=/usr/libexec/docker/cli-plugins build

override_dh_auto_test:
	ver="$$(engine/bundles/dynbinary-daemon/dockerd --version)"; \
		test "$$ver" = "Docker version $(VERSION), build $(ENGINE_GITCOMMIT)" && echo "PASS: daemon version OK" || (echo "FAIL: daemon version ($$ver) did not match" && exit 1)

	ver="$$(cli/build/docker --version)"; \
		test "$$ver" = "Docker version $(VERSION), build $(CLI_GITCOMMIT)" && echo "PASS: cli version OK" || (echo "FAIL: cli version ($$ver) did not match" && exit 1)

	ver="$$(/usr/libexec/docker/cli-plugins/docker-buildx docker-cli-plugin-metadata | awk '{ gsub(/[",:]/,"")}; $$1 == "Version" { print $$2 }')"; \
		test "$$ver" = "$(BUILDX_VERSION)" && echo "PASS: docker-buildx version OK" || (echo "FAIL: docker-buildx version ($$ver) did not match" && exit 1)

	ver="$$(/usr/libexec/docker/cli-plugins/docker-compose docker-cli-plugin-metadata | awk '{ gsub(/[",:]/,"")}; $$1 == "Version" { print $$2 }')"; \
		test "$$ver" = "$(COMPOSE_VERSION)" && echo "PASS: docker-compose version OK" || (echo "FAIL: docker-compose version ($$ver) did not match" && exit 1)

override_dh_strip:
	# Go has lots of problems with stripping, so just don't

# http://manpages.debian.org/dh_dwz
override_dh_dwz:
	# dh_dwz in debhelper versions less than 13 has issues with files that are missing debug symbols (once we update to debhelper-compat 13+ this can be removed)
	@# https://packages.debian.org/debhelper
	@# https://packages.ubuntu.com/debhelper

override_dh_auto_install:
	# docker-ce-cli install
	install -D -p -m 0755 cli/build/docker debian/docker-ce-cli/usr/bin/docker

	# docker-ce-cli shell-completion
	#
	# We are manually installing bash completions instead of using the "dh_bash-completion"
	# debhelper (see [1]); dh_bash-completion only supports bash, and none of the other shells,
	# which meant that we had to install 2 out of 3 manually, which was confusing ("what about
	# Bash?"). Given that locations to install these completion scripts are well-known, we
	# can safely use the manual approach for installing  them.
	#
	# In future, can consider using "dh_shell_completions" (see [2]), which supports bash, zsh
	# and fish. However, "dh_shell_completions" is still really premature, and not available
	# in stable releases. So, currently, adding it as build-dependency, especially since
	# these are well-known, may not be a good choice, but we can revisit that in future
	# if things mature in this area.
	#
	# Observant readers may notice that we don't include PowerShell completion in
	# this list (even though Cobra provides them, and PowerShell *can* be installed
	# oon Linux). The short story is that there's no well-defined location, nor
	# a well-defined approach for this.
	#
	# The PowerShell maintainers (see [3]) considering that no completion scripts
	# are needed for anything following the PowerShell specifications, and for
	# anything else, PowerShell is capable enough to use zsh and bash completions.
	#
	# All of the above taken into account; it's fuzzy enough to just leave it as
	# an exercise for the user to decide what to do.
	#
	# [1]: https://manpages.debian.org/bookworm/bash-completion/dh_bash-completion.1.en.html
	# [2]: https://manpages.debian.org/testing/dh-shell-completions/dh_shell_completions.1.en.html
	# [3]: https://github.com/PowerShell/PowerShell/issues/17582
	install -D -p -m 0644 cli/build/completion/bash/docker debian/docker-ce-cli/usr/share/bash-completion/completions/docker
	install -D -p -m 0644 cli/build/completion/fish/docker.fish debian/docker-ce-cli/usr/share/fish/vendor_completions.d/docker.fish
	install -D -p -m 0644 cli/build/completion/zsh/_docker debian/docker-ce-cli/usr/share/zsh/vendor-completions/_docker

	# docker-ce install
	install -D -p -m 0755 $(shell readlink -e engine/bundles/dynbinary-daemon/dockerd) debian/docker-ce/usr/bin/dockerd
	install -D -p -m 0755 $(shell readlink -e engine/bundles/dynbinary-daemon/docker-proxy) debian/docker-ce/usr/bin/docker-proxy
	install -D -p -m 0755 /usr/local/bin/docker-init debian/docker-ce/usr/libexec/docker/docker-init

	# docker-buildx-plugin install
	install -D -p -m 0755 /usr/libexec/docker/cli-plugins/docker-buildx debian/docker-buildx-plugin/usr/libexec/docker/cli-plugins/docker-buildx

	# docker-compose-plugin install
	install -D -p -m 0755 /usr/libexec/docker/cli-plugins/docker-compose debian/docker-compose-plugin/usr/libexec/docker/cli-plugins/docker-compose

	# docker-ce-rootless-extras install
	install -D -p -m 0755 /usr/local/bin/rootlesskit debian/docker-ce-rootless-extras/usr/bin/rootlesskit
	install -D -p -m 0755 engine/contrib/dockerd-rootless.sh debian/docker-ce-rootless-extras/usr/bin/dockerd-rootless.sh
	install -D -p -m 0755 engine/contrib/dockerd-rootless-setuptool.sh debian/docker-ce-rootless-extras/usr/bin/dockerd-rootless-setuptool.sh
	# TODO: how can we install vpnkit?

override_dh_installinit:
	# use "docker" as our service name, not "docker-ce"
	dh_installinit --name=docker

override_dh_installsystemd:
	# use "docker" as our service name, not "docker-ce"
	dh_installsystemd --name=docker

override_dh_shlibdeps:
	dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info

override_dh_install:
	dh_install
	# TODO Can we do this from within our container?
	dh_apparmor --profile-name=docker-ce -pdocker-ce

override_dh_gencontrol:
	# Use separate version for the buildx-plugin package, then generate the other control files as usual
	# TODO override "Source" field in control as well (to point to buildx, as it doesn't match the package name)
	dh_gencontrol -pdocker-buildx-plugin -- -v$${BUILDX_DEB_VERSION#v}-$${PKG_REVISION}~$${DISTRO}.$${VERSION_ID}~$${SUITE}

	# Use separate version for the compose-plugin package, then generate the other control files as usual
	# TODO override "Source" field in control as well (to point to compose, as it doesn't match the package name)
	dh_gencontrol -pdocker-compose-plugin -- -v$${COMPOSE_DEB_VERSION#v}-$${PKG_REVISION}~$${DISTRO}.$${VERSION_ID}~$${SUITE}

	dh_gencontrol --remaining-packages

%:
	dh $@ --with=bash-completion
