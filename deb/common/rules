#!/usr/bin/make -f

VERSION ?= $(shell cat engine/VERSION)
TARGET_ARCH = $(shell dpkg-architecture -qDEB_TARGET_ARCH)

# force packages to be built with xz compression, as Ubuntu 21.10 and up use
# zstd compression, which is non-standard, and breaks 'dpkg-sig --verify'
override_dh_builddeb:
	dh_builddeb -- -Zxz

override_dh_auto_build:
	# Build the daemon and dependencies
	cd /go/src/github.com/docker/docker && GITCOMMIT=$(ENGINE_GITCOMMIT) PRODUCT=docker ./hack/make.sh dynbinary
	cd /go/src/github.com/docker/docker && TMP_GOPATH="/go" hack/dockerfile/install/install.sh tini
	cd /go/src/github.com/docker/docker && TMP_GOPATH="/go" hack/dockerfile/install/install.sh rootlesskit dynamic
	# Build the CLI
	cd /go/src/github.com/docker/cli && VERSION=$(VERSION) GITCOMMIT=$(CLI_GITCOMMIT) LDFLAGS='' GO_LINKMODE=dynamic ./scripts/build/binary && DISABLE_WARN_OUTSIDE_CONTAINER=1 LDFLAGS='' make manpages

	# Build buildx plugin
	cd /go/src/github.com/docker/buildx \
	&& mkdir -p /usr/libexec/docker/cli-plugins/ \
	&& CGO_ENABLED=0 GO111MODULE=on go build -mod=vendor -o /usr/libexec/docker/cli-plugins/docker-buildx -ldflags "-X github.com/docker/buildx/version.Version=$(BUILDX_VERSION) -X github.com/docker/buildx/version.Revision=$(git rev-parse HEAD) -X github.com/docker/buildx/version.Package=github.com/docker/buildx" ./cmd/buildx

	# Build the compose plugin
	# FIXME: using GOPROXY, to work around:
	# go: github.com/Azure/azure-sdk-for-go@v48.2.0+incompatible: reading github.com/Azure/azure-sdk-for-go/go.mod at revision v48.2.0: unknown revision v48.2.0
	cd /go/src/github.com/docker/compose \
	&& GOPROXY="https://proxy.golang.org" GO111MODULE=on go mod download \
	&& mkdir -p /usr/libexec/docker/cli-plugins/ \
	&& GOPROXY="https://proxy.golang.org" GO111MODULE=on GIT_TAG=$(COMPOSE_VERSION) \
		make COMPOSE_BINARY=/usr/libexec/docker/cli-plugins/docker-compose -f builder.Makefile compose-plugin

	# Build the scan-plugin
	# TODO change once we support scan-plugin on other architectures
	if [ "$(TARGET_ARCH)" = "amd64" ]; then \
		cd /go/src/github.com/docker/scan-cli-plugin \
		&& PLATFORM_BINARY=docker-scan COMMIT=$(SCAN_GITCOMMIT) TAG_NAME=$(SCAN_VERSION) make native-build \
		&& mkdir -p /usr/libexec/docker/cli-plugins/ \
		&& mv bin/docker-scan /usr/libexec/docker/cli-plugins/; \
	fi

override_dh_auto_test:
	ver="$$(engine/bundles/dynbinary/dockerd --version)"; \
		test "$$ver" = "Docker version $(VERSION), build $(ENGINE_GITCOMMIT)" && echo "PASS: daemon version OK" || (echo "FAIL: daemon version ($$ver) did not match" && exit 1)

	ver="$$(cli/build/docker --version)"; \
		test "$$ver" = "Docker version $(VERSION), build $(CLI_GITCOMMIT)" && echo "PASS: cli version OK" || (echo "FAIL: cli version ($$ver) did not match" && exit 1)

	ver="$$(/usr/libexec/docker/cli-plugins/docker-buildx docker-cli-plugin-metadata | awk '{ gsub(/[",:]/,"")}; $$1 == "Version" { print $$2 }')"; \
		test "$$ver" = "$(BUILDX_VERSION)" && echo "PASS: docker-buildx version OK" || (echo "FAIL: docker-buildx version ($$ver) did not match" && exit 1)

	ver="$$(/usr/libexec/docker/cli-plugins/docker-compose docker-cli-plugin-metadata | awk '{ gsub(/[",:]/,"")}; $$1 == "Version" { print $$2 }')"; \
		test "$$ver" = "$(COMPOSE_VERSION)" && echo "PASS: docker-compose version OK" || (echo "FAIL: docker-compose version ($$ver) did not match" && exit 1)

	# FIXME: --version currently doesn't work as it makes a connection to the daemon, so using the plugin metadata instead
	# TODO change once we support scan-plugin on other architectures
	if [ "$(TARGET_ARCH)" = "amd64" ]; then \
		ver="$$(/usr/libexec/docker/cli-plugins/docker-scan docker-cli-plugin-metadata | awk '{ gsub(/[",:]/,"")}; $$1 == "Version" { print $$2 }')"; \
			test "$$ver" = "$(SCAN_VERSION)" && echo "PASS: docker-scan version OK" || (echo "FAIL: docker-scan version ($$ver) did not match" && exit 1); \
	fi

override_dh_strip:
	# Go has lots of problems with stripping, so just don't

override_dh_auto_install:
	# docker-ce-cli install
	install -D -m 0644 cli/contrib/completion/fish/docker.fish debian/docker-ce-cli/usr/share/fish/vendor_completions.d/docker.fish
	install -D -m 0644 cli/contrib/completion/zsh/_docker debian/docker-ce-cli/usr/share/zsh/vendor-completions/_docker
	install -D -m 0755 cli/build/docker debian/docker-ce-cli/usr/bin/docker

	# docker-ce install
	install -D -m 0644 engine/contrib/init/systemd/docker.service debian/docker-ce/lib/systemd/system/docker.service
	install -D -m 0644 engine/contrib/init/systemd/docker.socket debian/docker-ce/lib/systemd/system/docker.socket
	install -D -m 0755 $(shell readlink -e engine/bundles/dynbinary/dockerd) debian/docker-ce/usr/bin/dockerd
	install -D -m 0755 $(shell readlink -e engine/bundles/dynbinary/docker-proxy) debian/docker-ce/usr/bin/docker-proxy
	install -D -m 0755 /usr/local/bin/docker-init debian/docker-ce/usr/bin/docker-init

	# docker-buildx-plugin install
	install -D -m 0755 /usr/libexec/docker/cli-plugins/docker-buildx debian/docker-buildx-plugin/usr/libexec/docker/cli-plugins/docker-buildx

	# docker-compose-plugin install
	install -D -m 0755 /usr/libexec/docker/cli-plugins/docker-compose debian/docker-compose-plugin/usr/libexec/docker/cli-plugins/docker-compose

	# docker-scan-plugin install
	# TODO change once we support scan-plugin on other architectures
	if [ "$(TARGET_ARCH)" = "amd64" ]; then \
		install -D -m 0755 /usr/libexec/docker/cli-plugins/docker-scan debian/docker-scan-plugin/usr/libexec/docker/cli-plugins/docker-scan; \
	fi

	# docker-ce-rootless-extras install
	install -D -m 0755 /usr/local/bin/rootlesskit debian/docker-ce-rootless-extras/usr/bin/rootlesskit
	install -D -m 0755 /usr/local/bin/rootlesskit-docker-proxy debian/docker-ce-rootless-extras/usr/bin/rootlesskit-docker-proxy
	install -D -m 0755 engine/contrib/dockerd-rootless.sh debian/docker-ce-rootless-extras/usr/bin/dockerd-rootless.sh
	install -D -m 0755 engine/contrib/dockerd-rootless-setuptool.sh debian/docker-ce-rootless-extras/usr/bin/dockerd-rootless-setuptool.sh
	# TODO: how can we install vpnkit?

override_dh_installinit:
	# use "docker" as our service name, not "docker-ce"
	dh_installinit --name=docker

override_dh_shlibdeps:
	dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info

override_dh_install:
	dh_install
	# TODO Can we do this from within our container?
	dh_apparmor --profile-name=docker-ce -pdocker-ce

override_dh_gencontrol:
	# Use separate version for the buildx-plugin package, then generate the other control files as usual
	# TODO override "Source" field in control as well (to point to buildx, as it doesn't match the package name)
	dh_gencontrol -pdocker-buildx-plugin -- -v$${BUILDX_VERSION#v}~$${DISTRO}-$${SUITE}

	# Use separate version for the compose-plugin package, then generate the other control files as usual
	# TODO override "Source" field in control as well (to point to compose, as it doesn't match the package name)
	dh_gencontrol -pdocker-compose-plugin -- -v$${COMPOSE_VERSION#v}~$${DISTRO}-$${SUITE}

	# Use separate version for the scan-plugin package, then generate the other control files as usual
	# TODO override "Source" field in control as well (to point to scan-cli-plugin, as it doesn't match the package name)
	# TODO change once we support scan-plugin on other architectures (see dpkg-architecture -L)
	if [ "$(TARGET_ARCH)" = "amd64" ]; then \
		dh_gencontrol -pdocker-scan-plugin -- -v$${SCAN_VERSION#v}~$${DISTRO}-$${SUITE}; \
	fi
	dh_gencontrol --remaining-packages

%:
	dh $@ --with=bash-completion
